#!/usr/bin/env ruby

require "thor"

module DokkuInstaller
  class Cli < Thor

    desc "config", "config"
    def config
      run_command "config #{app_name}"
    end

    desc "config:get", "config:get"
    def config_get(*args)
      run_command "config:get #{app_name} #{args.first}"
    end

    desc "config:set", "config:set"
    def config_set(*args)
      run_command "config:set #{app_name} #{args.join(' ')}"
    end

    desc "config:unset", "config:unset"
    def config_unset(*args)
      run_command "config:unset #{app_name} #{args.join(' ')}"
    end

    desc "create", "create"
    def create(*args)
      run_command "create #{args.first}"
    end

    desc "domains", "domains"
    def domains(*args)
      run_command "domains #{app_name}"
    end

    desc "domains:set", "domains:set"
    def domains_set(*args)
      run_command "domains:set #{app_name} #{args.join(' ')}"
    end

    desc "logs", "logs"
    def logs(*args)
      run_command "logs #{app_name} #{args.join(' ')}"
    end

    desc "run", "run"
    def app_run(*args)
      run_command "run #{app_name} #{args.join(' ')}"
    end

    def method_missing(method, *args, &block)
      method = method.to_s
      if method.split(":").length == 2
        self.send(method.gsub(":", "_"), *args)
      elsif method == "run"
        self.app_run(*args)
      else
        super
      end
    end

  private

    def app_name
      @app_name ||= git_config_match[2]
    end

    def domain
      @domain ||= git_config_match[1]
    end

    def git_config_match
      @git_config_match ||= begin
        git_config = File.join(Dir.pwd, ".git", "config")
        exit unless File.exist?(git_config)

        git_config = File.read(git_config)
        match = git_config.match(/url \= dokku@(.*):(.*)\n/).to_a
        exit unless match

        match
      end
    end

    def run_command(command)
      dokku_command = "ssh -t dokku@#{domain} #{command}"

      puts "Running #{dokku_command}..."
      exec(dokku_command)
    end
  end
end

DokkuInstaller::Cli.start(ARGV)
